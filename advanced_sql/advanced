create table job_applied(
    job_id INT,
    application_sent_date DATE,
    custom_resume BOOLEAN,
    resume_file_name VARCHAR(255),
    cover_letter_sent BOOLEAN,
    cover_letter_file_name VARCHAR(255),
    status VARCHAR(50)
);

select * from job_applied;

insert into job_applied(job_id, application_sent_date, custom_resume, resume_file_name, cover_letter_sent, cover_letter_file_name, status)
values(1, 
    '2024-02-01',
    true,
    'resume_01.pdf',
    true,
    'cover_letter_01.pdf',
    'submitted'),
    (2, 
    '2024-05-07',
    true,
    'resume_02.pdf',
    true,
    NULL,
    'interview scheduled'),
    (3, 
    '2024-12-11',
    true,
    'resume_03.pdf',
    true,
    'cover_letter_03.pdf',
    'ghosted'),
    (4, 
    '2024-08-08',
    true,
    'resume_04.pdf',
    false,
    NULL,
    'submitted'),
    (5, 
    '2024-02-05',
    false,
    'resume_05.pdf',
    true,
    'cover_letter_03.pdf',
    'rejected');

    select * from job_applied;


    alter table job_applied
    add contact varchar(50);

    UPDATE job_applied
    set contact = 'Erich Bachman'
    where job_id = 1;

        UPDATE job_applied
    set contact = 'Dinesh Karthick'
    where job_id = 2;
        UPDATE job_applied
    set contact = 'Bertram galich'
    where job_id = 3;
        UPDATE job_applied
    set contact = 'Sulaiman shahi'
    where job_id = 4;
        UPDATE job_applied
    set contact = 'Khajur khan'
    where job_id = 5;

--To rename column name
alter table job_applied
rename column contact to contact_name;

--To change the column's data type
alter table job_applied
alter column contact_name type text;

--To drop the column
alter table job_applied
drop column contact_name;

--To drop the table
drop table job_applied;



--ADVANCED--
SELECT '2023-04-19'::date,
    '123'::INTEGER,
    'true'::BOOLEAN,
    '3.14'::REAL;

--To convert date timestamp to date(::)
select job_title_short as title,
        job_location as location,
        job_posted_date::date as date
    from
        job_postings_fact;

--To convert date timestamp to date timestamp + timezone('EST', 'PST' or whichever u want)
select job_title_short as title,
        job_location as location,
        job_posted_date AT TIME ZONE 'UTC' AT TIME ZONE 'EST' as date_time
    from
        job_postings_fact
    limit 5;

--EXTRACT MONTH, YEAR, DAY From Day/Time value
--(Used for Trend analysi - like period wise data lookup)
select job_title_short as title,
        job_location as location,
        job_posted_date AT TIME ZONE 'UTC' AT TIME ZONE 'EST' as date_time,
        EXTRACT(MONTH FROM job_posted_date) AS date_month,
        EXTRACT(YEAR FROM job_posted_date) AS date_year
    from
        job_postings_fact
    limit 5;

--Use case(to find the trend based on month for particular job)
SELECT
    COUNT(job_id) AS job_posted_count,
    EXTRACT(MONTH FROM job_posted_date) AS month
from 
    job_postings_fact
WHERE
    job_title_short = 'Data Analyst'
group by
    month
order BY
    job_posted_count desc;


---PRACTICE PROBLEM

select 
    job_schedule_type, 
    count(salary_year_avg) AS Average_Salary_year, count(salary_hour_avg) AS Average_Salary_hour
FROM
    job_postings_fact
WHERE
    job_posted_date::date > '2023-06-01'
group BY
    job_schedule_type;


--Create table for Jan, Feb, Mar months using EXTRACT func
Create table Junuary_jobs AS
    select * 
    from job_postings_fact
    where extract(month from job_posted_date) = 1;

Create table February_jobs AS
    select * 
    from job_postings_fact
    where extract(month from job_posted_date) = 2;

Create table March_jobs AS
    select * 
    from job_postings_fact
    where extract(month from job_posted_date) = 3;

select job_posted_date
from March_jobs;


--CASE expression

SELECT
    job_title_short,
    job_location,
    CASE
        when job_location = 'Anywhere' THEN 'Remote'
        when job_location = 'New York, NY' THEN 'Local'
        ELSE 'Onsite'
    END AS location_category
from
    job_postings_fact;

--#2, CASE
SELECT
    COUNT(job_id) AS number_of_jobs,
    CASE
        when job_location = 'Anywhere' THEN 'Remote'
        when job_location = 'New York, NY' THEN 'Local'
        ELSE 'Onsite'
    END AS location_category
from
    job_postings_fact
where
    job_title_short = 'Data Analyst'
group by location_category;


--Subquery & CTE
--Subquery
select * from(
        select * from job_postings_fact
        where EXTRACT(MONTH from job_posted_date) = 1
) AS january_jobs;

select 
    company_id,
    name as company_name
from
    company_dim
where
    company_id IN(
    select 
        company_id
    from
        job_postings_fact
    where
        job_no_degree_mention = true
    order by
        company_id);

--Practice problem
select sd.skills as skill_name, x.total_jobss
from (select 
        skill_id, count(*) AS total_jobss
    from
        skills_job_dim
    group by 
        skill_id
    order by 
        total_jobss desc
    limit 5) x
join skills_dim sd ON sd.skill_id = x.skill_id
order by total_jobss desc;

--CTE
WITH january_jobss AS
    (select *
    from job_postings_fact
    where EXTRACT(MONTH from job_posted_date) = 1)
select * from january_jobss;


WITH Job_count AS
    (select 
        company_id,
        count(*)
    from
        job_postings_fact
    group BY
        company_id)
select *
from Job_count;

WITH Job_count AS
    (select 
        company_id,
        count(*) AS total_jobs
    from
        job_postings_fact
    group BY
        company_id)
select company_dim.name as company_name,
        Job_count.total_jobs
from company_dim
left join Job_count ON Job_count.company_id = company_dim.company_id
order BY
    total_jobs desc;


select * from skills_job_dim limit 10;
select * from skills_dim limit 10;


--Practice problem
WITH remote_job_skills AS
    (SELECT
        skill_id,
        count(*) AS skill_count
    From
        skills_job_dim AS skills_to_job
    JOIN job_postings_fact AS job_postings ON job_postings.job_id = skills_to_job.job_id
    where
        job_postings.job_work_from_home = true AND
        job_postings.job_title_short = 'Data Analyst'
    GROUP BY
        skill_id)
select 
    skill.skill_id,
    skills as skill_name,
    skill_count
from
    remote_job_skills
JOIN skills_dim as skill ON skill.skill_id = remote_job_skills.skill_id
order by 
    skill_count desc
limit 5;


--UNION(for unique) & UNION ALL(for duplicates)
SELECT
    job_title_short,
    company_id,
    job_location
from
    February_jobs
UNION ALL
SELECT
    job_title_short,
    company_id,
    job_location
from
    March_jobs;

--Find the job postings from the first quarter that have a salary greater than $70K
--(You can remove alias for each field and run if no error comes)

SELECT 
    q1_job_postings.job_title_short,
    q1_job_postings.job_location,
    q1_job_postings.job_via,
    q1_job_postings.job_posted_date::date,
    q1_job_postings.salary_year_avg
FROM(
    SELECT * FROM Junuary_jobs
    UNION ALL
    SELECT * FROM February_jobs
    UNION ALL
    SELECT * FROM March_jobs) q1_job_postings
WHERE
    q1_job_postings.salary_year_avg > 70000 AND
    q1_job_postings.job_title_short = 'Data Analyst'
ORDER BY
    q1_job_postings.salary_year_avg DESC;



select * from Junuary_jobs;
select * from job_postings_fact limit 5;  